name: Build (Ubuntu)

on:
    pull_request:
    workflow_dispatch:

jobs:
    build:
        name: Build plugin for Windows (using docker)
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Build the Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: false
                  tags: ukcp-builder:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  load: true
                  build-args: |
                      WINDOWS_SDK_VERSION=10.0.22621

            - name: Run CMake
              run: |
                  docker run -v ${{ github.workspace }}:/workspace -w /workspace ukcp-builder \
                    /bin/bash -c "cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=\$TOOLCHAIN -G Ninja -B build"

            - name: Build core (Ninja target)
              timeout-minutes: 60
              run: |
                  docker run -v ${{ github.workspace }}:/workspace -w /workspace/build ukcp-builder \
                    /bin/bash -c "ninja"

            - name: Upload build directory as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ukcp-build
                  path: build

    test:
        name: Tests (Windows)
        runs-on: windows-latest
        needs: build
        steps:
            - name: Checkout Code and Submodules
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Set up Visual Studio Shell
              uses: egor-tensin/vs-shell@v2
              with:
                  arch: x86

            - name: Download build artifact
              uses: actions/download-artifact@v4
              with:
                  name: ukcp-build
                  path: build

            - name: Copy DLLs and Dependencies
              working-directory: build
              shell: powershell
              run: |
                  # Copy any DLL dependencies to the bin directory
                  Write-Host "Copying required DLLs to test executable directory..."
                  if (Test-Path "lib") {
                    Get-ChildItem -Path "lib" -Filter "*.dll" | ForEach-Object {
                      $dllName = $_.Name
                      Write-Host "Copying $dllName to bin directory"
                      Copy-Item -Path $_.FullName -Destination "bin\" -Force
                    }
                  }

            - name: Update CTest Configuration
              working-directory: build
              shell: powershell
              run: |
                  # Update CTestTestfile.cmake to point to the correct executable paths
                  Write-Host "Updating CTest configuration files..."

                  if (Test-Path "CTestTestfile.cmake") {
                    $content = Get-Content "CTestTestfile.cmake" -Raw
                    $updatedContent = $content -replace "/workspace/build/bin/", "bin/"
                    $updatedContent = $updatedContent -replace "([""'])bin/([^""']+)\.exe([""'])", '$1bin/$2.exe$3'
                    Set-Content "CTestTestfile.cmake" -Value $updatedContent -NoNewline
                    
                    Write-Host "Updated main CTestTestfile.cmake"
                    Write-Host "Contents:"
                    Get-Content "CTestTestfile.cmake"
                  }

                  # Update any other CTestTestfile.cmake files recursively
                  Get-ChildItem -Path . -Filter "CTestTestfile.cmake" -Recurse | ForEach-Object {
                    $file = $_.FullName
                    Write-Host "Updating $file"
                    
                    $content = Get-Content $file -Raw
                    $updatedContent = $content -replace "/workspace/build/bin/", "bin/"
                    $updatedContent = $updatedContent -replace "([""'])bin/([^""']+)\.exe([""'])", '$1bin/$2.exe$3'
                    Set-Content $file -Value $updatedContent -NoNewline
                  }

            - name: Run Tests with CTest
              working-directory: build
              shell: powershell
              run: |
                  # Run tests using CTest with correct configuration
                  Write-Host "Running tests with CTest..."
                  ctest -C Release -V --output-on-failure --no-tests=error
